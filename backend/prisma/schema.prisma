generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model USState {
  id           BigInt           @id @default(autoincrement())
  name         String
  fips_code    String           @unique
  abbreviation String
  cities       USCity[]
  counties     USCounty[]
  districts    VotingDistrict[]
}

model USCounty {
  id          BigInt                 @id @default(autoincrement())
  us_state_id BigInt
  name        String
  fips_code   String                 @unique
  cities      USCityCounty[]
  us_state    USState                @relation(fields: [us_state_id], references: [id])
  districts   VotingDistrictCounty[]
}

model USCity {
  id          BigInt               @id @default(autoincrement())
  us_state_id BigInt
  name        String
  fips_code   String               @unique
  us_state    USState              @relation(fields: [us_state_id], references: [id])
  counties    USCityCounty[]
  districts   VotingDistrictCity[]
}

model USCityCounty {
  city_id   BigInt
  county_id BigInt
  city      USCity   @relation(fields: [city_id], references: [id])
  county    USCounty @relation(fields: [county_id], references: [id])

  @@id([city_id, county_id])
}

model VotingDistrict {
  id            BigInt                 @id @default(autoincrement())
  us_state_id   BigInt
  district_code String                 @unique
  us_state      USState                @relation(fields: [us_state_id], references: [id])
  cities        VotingDistrictCity[]
  counties      VotingDistrictCounty[]
}

model VotingDistrictCity {
  district_id BigInt
  city_id     BigInt
  city        USCity         @relation(fields: [city_id], references: [id])
  district    VotingDistrict @relation(fields: [district_id], references: [id])

  @@id([district_id, city_id])
}

model VotingDistrictCounty {
  district_id BigInt
  county_id   BigInt
  county      USCounty       @relation(fields: [county_id], references: [id])
  district    VotingDistrict @relation(fields: [district_id], references: [id])

  @@id([district_id, county_id])
}

model ElectionType {
  id          BigInt     @id @default(autoincrement())
  name        String     @unique
  description String?
  elections   Election[]
}

model ElectionCycle {
  id            BigInt     @id @default(autoincrement())
  election_year Int
  election_day  DateTime
  created_on    DateTime
  created_by    String
  updated_on    DateTime
  updated_by    String?
  elections     Election[]
}

model Election {
  id                  BigInt              @id @default(autoincrement())
  election_cycle_id   BigInt
  election_type_id    BigInt
  created_on          DateTime
  created_by          String
  updated_on          DateTime
  updated_by          String?
  election_cycle      ElectionCycle       @relation(fields: [election_cycle_id], references: [id])
  election_type       ElectionType        @relation(fields: [election_type_id], references: [id])
  election_candidates ElectionCandidate[]
  geographies         ElectionGeography[]
}

model Candidate {
  id                  BigInt              @id @default(autoincrement())
  first_name          String
  last_name           String
  nickname            String?
  picture_link        String?
  created_on          DateTime
  created_by          String
  updated_on          DateTime
  updated_by          String?
  candidate_histories CandidateHistory[]
  candidate_parties   CandidateParty[]
  candidate_views     CandidateView[]
  election_candidates ElectionCandidate[]
}

model PoliticalParty {
  id                  BigInt              @id @default(autoincrement())
  name                String
  party_code          String              @unique
  created_at          DateTime
  created_by          String
  updated_at          DateTime
  updated_by          String?
  candidate_parties   CandidateParty[]
  election_candidates ElectionCandidate[]
}

model CandidateParty {
  id                 BigInt         @id @default(autoincrement())
  candidate_id       BigInt
  political_party_id BigInt
  start_date         DateTime
  end_date           DateTime?
  created_on         DateTime
  created_by         String
  updated_on         DateTime
  updated_by         String?
  candidate          Candidate      @relation(fields: [candidate_id], references: [id])
  political_party    PoliticalParty @relation(fields: [political_party_id], references: [id])
}

model ElectionCandidate {
  id           BigInt                      @id @default(autoincrement())
  election_id  BigInt
  candidate_id BigInt
  party_id     BigInt
  website      String?
  created_on   DateTime
  created_by   String
  updated_on   DateTime
  updated_by   String?
  key_issues   CandidateKeyIssue[]
  candidate    Candidate                   @relation(fields: [candidate_id], references: [id])
  election     Election                    @relation(fields: [election_id], references: [id])
  party        PoliticalParty              @relation(fields: [party_id], references: [id])
  donations    ElectionCandidateDonation[]
}

model CandidateKeyIssue {
  id                    BigInt            @id @default(autoincrement())
  election_candidate_id BigInt
  issue_text            String
  order_of_important    Int
  view_text             String?
  created_on            DateTime
  created_by            String
  updated_on            DateTime
  updated_by            String?
  election_candidate    ElectionCandidate @relation(fields: [election_candidate_id], references: [id])
}

model CandidateView {
  id            BigInt                @id @default(autoincrement())
  candidate_id  BigInt
  view_type_id  BigInt
  view_text     String
  created_on    DateTime
  created_by    String
  updated_on    DateTime
  updated_by    String?
  candidate     Candidate             @relation(fields: [candidate_id], references: [id])
  view_category CandidateViewCategory @relation(fields: [view_type_id], references: [id])
  votes         CandidateVote[]
  legislation   CandidateLegislation[]
}

model CandidateViewCategory {
  id              BigInt          @id @default(autoincrement())
  title           String
  candidate_views CandidateView[]
}

model CandidateHistory {
  id           BigInt    @id @default(autoincrement())
  candidate_id BigInt
  history_text String
  created_on   DateTime
  created_by   String
  updated_on   DateTime
  updated_by   String?
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
}

model ElectionCandidateDonation {
  id                    BigInt            @id @default(autoincrement())
  election_candidate_id BigInt
  donor_name            String
  donation_amount       Decimal
  created_on            DateTime
  created_by            String
  updated_on            DateTime
  updated_by            String?
  election_candidate    ElectionCandidate @relation(fields: [election_candidate_id], references: [id])
  
  @@index([donor_name])
}

model Donor {
  name                  String                        @id
  donor_type            DonorType
  organization_name     String?
  location              String?
  industry              String?
  created_on            DateTime
  created_by            String
  updated_on            DateTime
  updated_by            String?
}

enum DonorType {
  INDIVIDUAL
  CORPORATION
  PAC
  UNION
  NONPROFIT
  OTHER
}

model ElectionGeography {
  id          BigInt        @id @default(autoincrement())
  election_id BigInt
  scope_type  GeographyType
  scope_id    String
  election    Election      @relation(fields: [election_id], references: [id])
}

enum GeographyType {
  NATIONAL
  STATE
  COUNTY
  CITY
  DISTRICT
}

model CandidateVote {
  id             BigInt                @id @default(autoincrement())
  candidate_view_id BigInt
  bill_title     String
  vote_type      VoteType
  vote_date      DateTime
  description    String?
  impact         String?
  stated_reason  String?
  created_on     DateTime
  created_by     String
  updated_on     DateTime
  updated_by     String?
  candidate_view CandidateView          @relation(fields: [candidate_view_id], references: [id])
  conflicts      ConflictOfInterest[]
}

enum VoteType {
  FOR
  AGAINST
  PRESENT
  NOT_VOTING
}

model CandidateLegislation {
  id             BigInt                @id @default(autoincrement())
  candidate_view_id BigInt
  title          String
  status         LegislationStatus
  date           DateTime
  description    String?
  impact         String?
  stated_reason  String?
  created_on     DateTime
  created_by     String
  updated_on     DateTime
  updated_by     String?
  candidate_view CandidateView          @relation(fields: [candidate_view_id], references: [id])
  conflicts      ConflictOfInterest[]
}

enum LegislationStatus {
  INTRODUCED
  PASSED
  PENDING
  VETOED
}

model ConflictOfInterest {
  id                   BigInt                @id @default(autoincrement())
  conflict_type        ConflictType
  description          String
  severity             ConflictSeverity
  impact               String?
  response             String?
  candidate_vote_id    BigInt?
  candidate_legislation_id BigInt?
  created_on           DateTime
  created_by           String
  updated_on           DateTime
  updated_by           String?
  candidate_vote       CandidateVote?        @relation(fields: [candidate_vote_id], references: [id])
  candidate_legislation CandidateLegislation? @relation(fields: [candidate_legislation_id], references: [id])

  @@index([candidate_vote_id])
  @@index([candidate_legislation_id])
}

enum ConflictType {
  FINANCIAL
  PERSONAL
  PROFESSIONAL
}

enum ConflictSeverity {
  LOW
  MEDIUM
  HIGH
}
